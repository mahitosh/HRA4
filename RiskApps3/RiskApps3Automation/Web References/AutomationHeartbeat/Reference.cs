//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace RiskApps3Automation.AutomationHeartbeat {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RecordHeartbeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogHeartbeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::RiskApps3Automation.Properties.Settings.Default.RiskApps3Automation_AutomationHeartbeat_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public Service1(String url)
        {
            if (String.IsNullOrEmpty(url))
            {
                this.Url = global::RiskApps3Automation.Properties.Settings.Default.RiskApps3Automation_AutomationHeartbeat_Service1;
            }
            else
            {
                this.Url = url;
            }
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RecordHeartbeatCompletedEventHandler RecordHeartbeatCompleted;
        
        /// <remarks/>
        public event LogHeartbeatCompletedEventHandler LogHeartbeatCompleted;
        
        /// <remarks/>
        public event LogStatusCompletedEventHandler LogStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecordHeartbeat", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordHeartbeat(string source, string status, int apptid, string unitnum) {
            object[] results = this.Invoke("RecordHeartbeat", new object[] {
                        source,
                        status,
                        apptid,
                        unitnum});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RecordHeartbeatAsync(string source, string status, int apptid, string unitnum) {
            this.RecordHeartbeatAsync(source, status, apptid, unitnum, null);
        }
        
        /// <remarks/>
        public void RecordHeartbeatAsync(string source, string status, int apptid, string unitnum, object userState) {
            if ((this.RecordHeartbeatOperationCompleted == null)) {
                this.RecordHeartbeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordHeartbeatOperationCompleted);
            }
            this.InvokeAsync("RecordHeartbeat", new object[] {
                        source,
                        status,
                        apptid,
                        unitnum}, this.RecordHeartbeatOperationCompleted, userState);
        }
        
        private void OnRecordHeartbeatOperationCompleted(object arg) {
            if ((this.RecordHeartbeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordHeartbeatCompleted(this, new RecordHeartbeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogHeartbeat", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LogHeartbeat(string source) {
            object[] results = this.Invoke("LogHeartbeat", new object[] {
                        source});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LogHeartbeatAsync(string source) {
            this.LogHeartbeatAsync(source, null);
        }
        
        /// <remarks/>
        public void LogHeartbeatAsync(string source, object userState) {
            if ((this.LogHeartbeatOperationCompleted == null)) {
                this.LogHeartbeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogHeartbeatOperationCompleted);
            }
            this.InvokeAsync("LogHeartbeat", new object[] {
                        source}, this.LogHeartbeatOperationCompleted, userState);
        }
        
        private void OnLogHeartbeatOperationCompleted(object arg) {
            if ((this.LogHeartbeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogHeartbeatCompleted(this, new LogHeartbeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LogStatus(string source, string applicationType, string status, string description) {
            object[] results = this.Invoke("LogStatus", new object[] {
                        source,
                        applicationType,
                        status,
                        description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LogStatusAsync(string source, string applicationType, string status, string description) {
            this.LogStatusAsync(source, applicationType, status, description, null);
        }
        
        /// <remarks/>
        public void LogStatusAsync(string source, string applicationType, string status, string description, object userState) {
            if ((this.LogStatusOperationCompleted == null)) {
                this.LogStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogStatusOperationCompleted);
            }
            this.InvokeAsync("LogStatus", new object[] {
                        source,
                        applicationType,
                        status,
                        description}, this.LogStatusOperationCompleted, userState);
        }
        
        private void OnLogStatusOperationCompleted(object arg) {
            if ((this.LogStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogStatusCompleted(this, new LogStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void RecordHeartbeatCompletedEventHandler(object sender, RecordHeartbeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordHeartbeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordHeartbeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogHeartbeatCompletedEventHandler(object sender, LogHeartbeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogHeartbeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogHeartbeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void LogStatusCompletedEventHandler(object sender, LogStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591